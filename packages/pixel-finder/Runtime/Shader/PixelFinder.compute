#pragma kernel PixelFinderInitialize
#pragma kernel PixelFinderMain
#pragma kernel DebugView
#pragma kernel DebugViewValues
#pragma kernel CompileDebugViews


/*
 * read only textures info
 */
Texture2D<float4> inputTexture;
int inputTextureSize;

/*
 * read only color data 
 */
int colorArraySize;
Texture2D<float4> colorArrayTexture;

/*
 * Debug params
 * TODO: move these to a debug
 */
RWTexture2D<uint> uintText2D;
RWTexture2D<float> floatText2D;
RWTexture2D<float4> debugTexture;
RWStructuredBuffer<uint2> debugUint2Buffer;
RWStructuredBuffer<float2> debugFloat2Buffer;
RWStructuredBuffer<uint> debugUintBuffer;
RWStructuredBuffer<float> debugFloatBuffer;
int colorBufferCount;
StructuredBuffer<float4> debugColorBuffer;

/*
 * This value comes from a predetermined max value (uint.MaxValue:4294967295) divided by the total pixels in  a view
 *
 * Important! This causes issues when converting the values from uint to int
 * This might be useful during the gpu world stuff, but the final result of data needs to be standardized
 * So applications do not need to worry about handling the conversion value.
 *
 * This value can be stored in the as the `Raw Uint Data` buffer so there is that access from the app side
 */
static const uint MAX_VALUE_FROM_UINT = 16384;

/*
 * This value comes from a predetermined max value (int.MaxValue:2147483647) divided by the total pixels in  a view
 * We capture the pixel count in a uint but to standardize the data we have to cast it to a int
 * The final value comes from : 2147483647/(512*512)
 */
static const uint MAX_VALUE_FROM_INT = 8191;

struct pixelStruct
{
    uint count;
};

RWStructuredBuffer<pixelStruct> pixelCountBuffer;

[numthreads(64,1,1)]
void PixelFinderInitialize(uint3 id : SV_DispatchThreadID)
{
    pixelCountBuffer[id.x].count = 0;
}

bool colorMatch(float4 c, float4 d)
{
    return abs(c.r - d.r) < 0.01 && abs(c.g - d.g) < 0.01 && abs(c.b - d.b) < 0.01;
}


float calcFrac(const float coord, const float size)
{
    const float radius = 0.5;
    const float px = 1 / size;
    const float pos = coord / size - radius;
    const float theta = atan2(pos + px, radius) - atan2(pos, radius);
    return theta * radius / px;
}


[numthreads(8,8,1)]
void PixelFinderMain(uint3 id : SV_DispatchThreadID)
{
    const float4 currentColor = inputTexture[id.xy];

    for (int i = 0; i < colorArraySize; i++)
    {
        if (colorMatch(currentColor, colorArrayTexture[uint2(i, 0)]))
        {
            const float textureSize = (float)inputTextureSize;
            const float fracX = calcFrac(id.x, textureSize);
            const float fracY = calcFrac(id.y, textureSize);
            // const float fracY = calcFrac(id.y / textureSize - 0.5, 0.5);

            const uint overall = floor(MAX_VALUE_FROM_UINT * pow(abs(fracX * fracY), sqrt(2)));

            InterlockedAdd(pixelCountBuffer[i].count, overall);
        }
    }
}

[numthreads(8,8,1)]
void DebugView(uint3 id : SV_DispatchThreadID)
{
    const float offset = 0.5;

    const float fracX = calcFrac(id.x / (float)512 - offset, offset);
    const float fracY = calcFrac(id.y / (float)512 - offset, offset);
    const float frag = pow(abs(fracX * fracY), sqrt(2));
    debugTexture[id.xy] = debugColorBuffer[floor(colorBufferCount * frag)];
}


[numthreads(1,1,1)]
void DebugViewValues(uint3 id : SV_DispatchThreadID)
{
    const float offset = 0.5;
    const float fraction = 512.0 - offset;

    const float fracX = calcFrac(id.x / fraction, offset);
    const float fracY = calcFrac(id.y / fraction, offset);

    const float frag = pow(abs(fracX * fracY), sqrt(2));
    const uint overall = floor(MAX_VALUE_FROM_UINT * frag);

    // debugFloatBuffer[id.x] = frag;
    floatText2D[id.xy] = frag;
    uintText2D[id.xy] = overall;
}

[numthreads(1,1,1)]
void CompileDebugViews(uint3 id : SV_DispatchThreadID)
{
    for (uint x = 0, index = 0; x < 512; x++)
    {
        for (uint y = 0; y < 512; y++, index++)
        {
            debugFloatBuffer[index] = floatText2D[uint2(x, y)];
            debugUintBuffer[index] = uintText2D[uint2(x, y)];
        }
    }
}
