// #pragma kernel DebugView
// #pragma kernel DebugViewValues
//
// Texture2D texture;
// RWTexture2D<float4> debugTexture;
// RWTexture2D<uint> debugUintValue;
// RWTexture2D<float> debugFloatValue;
//
//
// static const uint MAX_VALUE = 16384;
// static const uint TEXTURE_SIZE = 512;
// static const float PIXEL_FRACTION = 1 / (float)TEXTURE_SIZE;
//
// bool colorMatch(float4 c, float4 d)
// {
//     return abs(c.r - d.r) < 0.01 && abs(c.g - d.g) < 0.01 && abs(c.b - d.b) < 0.01;
// }
//
//
// float calcFrac(const float pos, const float r)
// {
//     const float theta = atan2(pos + PIXEL_FRACTION, r) - atan2(pos, r);
//     return theta * r / PIXEL_FRACTION;
// }
//
// [numthreads(8,8,1)]
// void DebugView(uint3 id : SV_DispatchThreadID)
// {
// }
//
// [numthreads(8,8,1)]
// void DebugViewValues(uint3 id : SV_DispatchThreadID)
// {
//     const float offset = 0.5;
//     const float fraction = (float)TEXTURE_SIZE - offset;
//
//     const float fracX = calcFrac(id.x / fraction, offset);
//     const float fracY = calcFrac(id.y / fraction, offset);
//
//     const float frag = pow(abs(fracX * fracY), sqrt(2));
//     const uint overall = floor(MAX_VALUE * frag);
//
//     debugFloatValue[id.xy] = frag;
//     debugUintValue[id.xy] = overall;
// }
